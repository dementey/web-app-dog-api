{"version":3,"sources":["actions/index.js","reducers/index.js","components/SimpleAppBar.js","components/SimpleSelect.js","components/Picker.js","components/ImageGridList.js","components/CircularIndeterminate.js","components/ContainedButtons.js","components/PaperSheet.js","components/Home.js","components/MediaCard.js","components/RandomImage.js","components/PagesRouter.js","components/Footer.js","containers/App.js","index.js"],"names":["selectSubreddit","subreddit","type","invalidateSubreddit","initialFetchPosts","dispatch","fetch","then","response","json","initialposts","Object","keys","message","initialReceivePosts","fetchPosts","requestPosts","concat","posts","map","child","receivedAt","Date","now","receivePosts","fetchPostsIfNeeded","getState","state","postsBySubreddit","isFetching","didInvalidate","shouldFetchPosts","rootReducer","combineReducers","initialPostsBySubreddit","arguments","length","undefined","action","objectSpread","items2","defineProperty","items","lastUpdated","selectedSubreddit","initialSubBreed","items3","subbreed","withStyles","theme","root","flexGrow","button","margin","spacing","unit","input","display","props","classes","react_default","a","createElement","className","AppBar_default","position","Toolbar_default","IconButton_default","color","aria-label","href","Pets_default","NavLink","to","Button_default","variant","SimpleSelect","age","name","labelWidth","handleChange","event","_this","setState","target","value","cbOnChange","this","ReactDOM","findDOMNode","InputLabelRef","offsetWidth","_this2","_this$props","options","inputLabel","autoComplete","FormControl_default","formControl","InputLabel_default","ref","htmlFor","Select_default","onChange","OutlinedInput_default","id","option","MenuItem_default","key","React","Component","flexWrap","minWidth","selectEmpty","marginTop","Picker","_ref","react","components_SimpleSelect","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","tileData","GridList_default","cellHeight","cols","tile","GridListTile_default","src","alt","progress","CircularProgress_default","cbOnClick","onClick","mixins","gutters","paddingTop","paddingBottom","children","Paper_default","elevation","Typography_default","component","Home","nextSubreddit","handleRefreshClick","e","preventDefault","_this$props2","prevProps","_this$props3","_this$props4","initial","isEmpty","gutterBottom","components_Picker","toLocaleTimeString","components_ContainedButtons","components_PaperSheet","components_CircularIndeterminate","style","opacity","components_ImageGridList","connect","card","maxWidth","media","srcImg","Card_default","CardActionArea_default","CardMedia_default","image","title","CardContent_default","RandomImage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","dataReady","fetchError","errorMessage","console","error","fetchSuccess","loadedData","log","status","loadData","isoFetch","method","headers","Accept","ok","Err","Error","userMessage","data","catch","components_MediaCard","PureComponent","PagesRouter","Route","path","exact","Grid_default","container","item","xs","sm","App","BrowserRouter","components_SimpleAppBar","components_PagesRouter","components_Footer","middleware","thunk","store","createStore","reducer","applyMiddleware","apply","render","react_redux_es","containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.4392d357.chunk.js","sourcesContent":["export const INITIAL_REQUEST_POSTS = 'INITIAL_REQUEST_POSTS'\r\nexport const REQUEST_POSTS = 'REQUEST_POSTS'\r\n\r\nexport const INITIAL_RECEIVE_POSTS = 'INITIAL_RECEIVE_POSTS'\r\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS'\r\nexport const INITIAL_RECEIVE_SUBBREED = 'INITIAL_RECEIVE_SUBBREED'\r\n\r\nexport const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT'\r\nexport const INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT'\r\n\r\nexport const selectSubreddit = subreddit => ({\r\n  type: SELECT_SUBREDDIT,\r\n  subreddit\r\n})\r\n\r\nexport const invalidateSubreddit = subreddit => ({\r\n  type: INVALIDATE_SUBREDDIT,\r\n  subreddit\r\n})\r\n\r\nexport const initialRequestPosts = () => ({\r\n  type: INITIAL_REQUEST_POSTS\r\n})\r\n\r\nexport const requestPosts = subreddit => ({\r\n  type: REQUEST_POSTS,\r\n  subreddit\r\n})\r\n\r\nexport const initialReceivePosts = (json) => ({\r\n  type: INITIAL_RECEIVE_POSTS,\r\n  initialposts: Object.keys(json.message),\r\n\r\n})\r\n\r\nexport const receivePosts = (subreddit, json) => ({\r\n  type: RECEIVE_POSTS,\r\n  subreddit,\r\n  posts: json.message.map(child => child),\r\n  receivedAt: Date.now()\r\n})\r\n\r\nexport const initialReceiveSubbreed = (json) => ({\r\n  type: INITIAL_RECEIVE_SUBBREED,\r\n  subbreed: Object.keys(json.message),\r\n\r\n})\r\n\r\nexport const initialFetchPosts = () => dispatch => {\r\n  dispatch(initialRequestPosts())\r\n  return fetch(`https://dog.ceo/api/breeds/list/all`)\r\n    .then(response => response.json())\r\n    .then(json => dispatch(initialReceivePosts(json)))\r\n}\r\n\r\nconst fetchPosts = subreddit => dispatch => {\r\n  dispatch(requestPosts(subreddit))\r\n  return fetch(`https://dog.ceo/api/breed/${subreddit}/images`)\r\n    .then(response => response.json())\r\n    .then(json => dispatch(receivePosts(subreddit, json)))\r\n}\r\n\r\nexport const initialFetchSubBreed = subreddit => dispatch => {\r\n  return fetch(`https://dog.ceo/api/breed/${subreddit}/list`)\r\n    .then(response => response.json())\r\n    .then(json => dispatch(initialReceiveSubbreed(json)))\r\n}\r\n\r\n\r\nconst shouldFetchPosts = (state, subreddit) => {\r\n  const posts = state.postsBySubreddit[subreddit]\r\n  if (!posts) {\r\n    return true\r\n  }\r\n  if (posts.isFetching) {\r\n    return false\r\n  }\r\n  return posts.didInvalidate\r\n}\r\n\r\nexport const fetchPostsIfNeeded = subreddit => (dispatch, getState) => {\r\n  if (shouldFetchPosts(getState(), subreddit)) {\r\n    return dispatch(fetchPosts(subreddit))\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nlet nextTodoId = 0\r\nexport const addTodo = (text, result) => ({\r\n  type: 'ADD_TODO',\r\n  id: nextTodoId++,\r\n  text,\r\n  result\r\n})\r\n\r\nexport const setVisibilityFilter = filter => ({\r\n  type: 'SET_VISIBILITY_FILTER',\r\n  filter\r\n})\r\n\r\nexport const toggleTodo = id => ({\r\n  type: 'TOGGLE_TODO',\r\n  id\r\n})\r\n\r\nexport const VisibilityFilters = {\r\n  SHOW_ALL: 'SHOW_ALL',\r\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\r\n  SHOW_ACTIVE: 'SHOW_ACTIVE',\r\n  SHOW_PRIORITY: 'SHOW_PRIORITY',\r\n  SHOW_TIME: 'SHOW_TIME',\r\n}*/\r\n","import { combineReducers } from 'redux'\r\nimport {\r\n  SELECT_SUBREDDIT, INVALIDATE_SUBREDDIT,\r\n  INITIAL_REQUEST_POSTS, INITIAL_RECEIVE_POSTS,\r\n  REQUEST_POSTS, RECEIVE_POSTS,\r\n  INITIAL_RECEIVE_SUBBREED\r\n\r\n} from '../actions'\r\n\r\n\r\nconst selectedSubreddit = (state = 'affenpinscher', action) => {\r\n  switch (action.type) {\r\n    case SELECT_SUBREDDIT:\r\n      return action.subreddit\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\nconst posts = (state = {\r\n  isFetching: false,\r\n  didInvalidate: false,\r\n  items: []\r\n}, action) => {\r\n  switch (action.type) {\r\n    case INVALIDATE_SUBREDDIT:\r\n      return {\r\n        ...state,\r\n        didInvalidate: true\r\n      }\r\n    case REQUEST_POSTS:\r\n      return {\r\n        ...state,\r\n        isFetching: true,\r\n        didInvalidate: false\r\n      }\r\n    case RECEIVE_POSTS:\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        didInvalidate: false,\r\n        items: action.posts,\r\n        lastUpdated: action.receivedAt\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst initialPostsBySubreddit = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case INVALIDATE_SUBREDDIT:\r\n    case INITIAL_RECEIVE_POSTS:\r\n    case INITIAL_REQUEST_POSTS:\r\n      return {\r\n        ...state,\r\n        items2: action.initialposts\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nconst postsBySubreddit = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case INVALIDATE_SUBREDDIT:\r\n    case RECEIVE_POSTS:\r\n    case REQUEST_POSTS:\r\n      return {\r\n        ...state,\r\n        [action.subreddit]: posts(state[action.subreddit], action)\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst initialSubBreed = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case INITIAL_RECEIVE_SUBBREED:\r\n      return {\r\n        ...state,\r\n        items3: action.subbreed\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\nconst rootReducer = combineReducers({\r\n  initialPostsBySubreddit,\r\n  postsBySubreddit,\r\n  selectedSubreddit,\r\n  initialSubBreed,\r\n})\r\n\r\nexport default rootReducer\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Pets from '@material-ui/icons/Pets';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  button: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n});\r\n\r\nconst SimpleAppBar = (props) => {\r\n  const { classes } = props;\r\n\r\n  return (\r\n    <div className={classes.root} >\r\n      <AppBar position=\"static\" >\r\n        <Toolbar>\r\n          <IconButton color=\"inherit\" aria-label=\"Menu\" href=\"/\">\r\n            <Pets />\r\n          </IconButton>\r\n          <NavLink to=\"/\">\r\n            <Button variant=\"contained\" color=\"primary\" className={classes.button} >\r\n              Home\r\n          </Button></NavLink>\r\n          {/*<NavLink to=\"/bysubbreed\">\r\n            <Button variant=\"contained\" color=\"primary\" className={classes.button} >\r\n              By sub-breed\r\n            </Button></NavLink>*/}\r\n          <NavLink to=\"/randomimage\">\r\n            <Button variant=\"contained\" color=\"primary\" className={classes.button} >\r\n              Random image\r\n          </Button></NavLink>\r\n        </Toolbar>\r\n\r\n      </AppBar>\r\n    </div >\r\n  );\r\n}\r\n\r\nSimpleAppBar.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(SimpleAppBar);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing.unit,\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing.unit * 2,\r\n    },\r\n});\r\n\r\nclass SimpleSelect extends React.Component {\r\n    state = {\r\n        age: '',\r\n        name: 'hai',\r\n        labelWidth: 0,\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            labelWidth: ReactDOM.findDOMNode(this.InputLabelRef).offsetWidth,\r\n        });\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n        this.props.cbOnChange(event.target.value);\r\n    };\r\n\r\n    render() {\r\n        const { classes, options, inputLabel } = this.props;\r\n\r\n        return (\r\n            <form className={classes.root} autoComplete=\"off\">\r\n                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                    <InputLabel\r\n                        ref={ref => {\r\n                            this.InputLabelRef = ref;\r\n                        }}\r\n                        htmlFor=\"outlined-age-simple\"\r\n                    >\r\n                        {inputLabel}\r\n          </InputLabel>\r\n                    <Select\r\n                        value={this.state.age}\r\n                        onChange={this.handleChange}\r\n                        input={\r\n                            <OutlinedInput\r\n                                labelWidth={this.state.labelWidth}\r\n                                name=\"age\"\r\n                                id=\"outlined-age-simple\"\r\n                            />\r\n                        }\r\n                    >\r\n                         {options.map(option =>\r\n                            <MenuItem value={option} key={option}>\r\n                                {option}\r\n                            </MenuItem>)\r\n                        }\r\n\r\n                    </Select>\r\n                </FormControl>\r\n\r\n\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nSimpleSelect.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    options: PropTypes.array.isRequired,\r\n    cbOnChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(SimpleSelect);","import React, { Fragment } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport SimpleSelect from './SimpleSelect'\r\n\r\n\r\nconst Picker = ({ value, onChange, options, inputLabel }) => (\r\n  <Fragment>\r\n    Selected breed of dog - {value}\r\n    <SimpleSelect options={options} cbOnChange={onChange} inputLabel={inputLabel}></SimpleSelect>\r\n  </Fragment>\r\n)\r\n\r\nPicker.propTypes = {\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.string.isRequired\r\n  ).isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Picker\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n});\r\n\r\n\r\nfunction ImageGridList(props) {\r\n  const { classes, tileData } = props;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n         <GridList cellHeight={160} className={classes.gridList} cols={8}>\r\n        {tileData.map(tile => (\r\n          <GridListTile key={tile} cols={1}>\r\n            <img src={tile} alt={tile} />\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n    </div>\r\n  );\r\n}\r\n\r\nImageGridList.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  tileData: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(ImageGridList);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst styles = theme => ({\r\n  progress: {\r\n    margin: theme.spacing.unit * 2,\r\n  },\r\n});\r\n\r\nfunction CircularIndeterminate(props) {\r\n  const { classes } = props;\r\n  return (\r\n    <div>\r\n      <CircularProgress className={classes.progress} />\r\n    </div>\r\n  );\r\n}\r\n\r\nCircularIndeterminate.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(CircularIndeterminate);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst styles = theme => ({\r\n    button: {\r\n        margin: theme.spacing.unit,\r\n    },\r\n    input: {\r\n        display: 'none',\r\n    },\r\n});\r\n\r\nfunction ContainedButtons(props) {\r\n    const { classes, cbOnClick } = props;\r\n    return (\r\n        <div>\r\n            <Button variant=\"contained\" color=\"secondary\" className={classes.button} onClick={cbOnClick}>\r\n                Refresh\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nContainedButtons.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    cbOnClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(ContainedButtons);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    ...theme.mixins.gutters(),\r\n    paddingTop: theme.spacing.unit * 2,\r\n    paddingBottom: theme.spacing.unit * 2,\r\n  },\r\n});\r\n\r\nfunction PaperSheet(props) {\r\n  const { classes, children } = props;\r\n\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root} elevation={1}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          {children}\r\n        </Typography>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n\r\nPaperSheet.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(PaperSheet);\r\n","import React, { Component, Fragment } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { selectSubreddit, initialFetchPosts, fetchPostsIfNeeded, invalidateSubreddit } from '../actions'\r\nimport Picker from '../components/Picker'\r\nimport ImageGridList from '../components/ImageGridList'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CircularIndeterminate from './CircularIndeterminate'\r\nimport ContainedButtons from './ContainedButtons'\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport PaperSheet from './PaperSheet'\r\n\r\nclass Home extends Component {\r\n    static propTypes = {\r\n        selectedSubreddit: PropTypes.string.isRequired,\r\n        posts: PropTypes.array.isRequired,\r\n        isFetching: PropTypes.bool.isRequired,\r\n        lastUpdated: PropTypes.number,\r\n        dispatch: PropTypes.func.isRequired\r\n    }\r\n    componentWillMount() {\r\n        const { dispatch } = this.props\r\n        dispatch(initialFetchPosts())\r\n    }\r\n    componentDidMount() {\r\n\r\n        const { dispatch, selectedSubreddit } = this.props\r\n        dispatch(fetchPostsIfNeeded(selectedSubreddit))\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.selectedSubreddit !== this.props.selectedSubreddit) {\r\n            const { dispatch, selectedSubreddit } = this.props\r\n            dispatch(fetchPostsIfNeeded(selectedSubreddit))\r\n        }\r\n    }\r\n\r\n    handleChange = nextSubreddit => {\r\n        this.props.dispatch(selectSubreddit(nextSubreddit))\r\n    }\r\n\r\n    handleRefreshClick = e => {\r\n        e.preventDefault()\r\n\r\n        const { dispatch, selectedSubreddit } = this.props\r\n        dispatch(initialFetchPosts())\r\n        dispatch(invalidateSubreddit(selectedSubreddit))\r\n        dispatch(fetchPostsIfNeeded(selectedSubreddit))\r\n    }\r\n\r\n    render() {\r\n        const { selectedSubreddit, initial, posts, isFetching, lastUpdated } = this.props\r\n        const isEmpty = posts.length === 0\r\n        return (\r\n            <Fragment>\r\n\r\n                <GridList cellHeight={100} cols={2}>\r\n\r\n                    <GridListTile>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            {initial && <Picker value={selectedSubreddit}\r\n                                onChange={this.handleChange}\r\n                                options={initial}\r\n                                inputLabel=\"Breed\" />\r\n                            }\r\n                        </Typography>\r\n                    </GridListTile>\r\n                    <GridListTile>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            {lastUpdated &&\r\n                                <span>\r\n                                    Last updated at {new Date(lastUpdated).toLocaleTimeString()}\r\n                                </span>\r\n                            }\r\n                            {!isFetching &&\r\n                                <ContainedButtons cbOnClick={this.handleRefreshClick} />\r\n                            }\r\n                        </Typography>\r\n                    </GridListTile>\r\n                </GridList>\r\n                <PaperSheet>\r\n                    {isEmpty\r\n                        ? (isFetching ? <CircularIndeterminate /> : <h2>Empty.</h2>)\r\n                        : <div style={{ opacity: isFetching ? 0.5 : 1 }}>\r\n                            <ImageGridList tileData={posts} />\r\n                        </div>\r\n                    }\r\n                </PaperSheet>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    const { selectedSubreddit, initialPostsBySubreddit, postsBySubreddit } = state\r\n    const {\r\n        isFetching,\r\n        lastUpdated,\r\n        items: posts\r\n    } = postsBySubreddit[selectedSubreddit] || {\r\n        isFetching: true,\r\n        items: []\r\n    }\r\n    const { items2: initial } = initialPostsBySubreddit || { items2: [] }\r\n    return {\r\n        selectedSubreddit,\r\n        initial,\r\n        posts,\r\n        isFetching,\r\n        lastUpdated\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Home)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';import CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = {\r\n  card: {\r\n    maxWidth: 400,\r\n  },\r\n  media: {\r\n    height: 400,\r\n  },\r\n};\r\n\r\nfunction MediaCard(props) {\r\n  const { classes, srcImg, cbOnClick } = props;\r\n  return (\r\n    <Card className={classes.card} onClick={cbOnClick}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image={srcImg}\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            Breed\r\n          </Typography>\r\n          <Typography component=\"p\">\r\n            {srcImg}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n}\r\n\r\nMediaCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(MediaCard);","import React from 'react';\r\nimport isoFetch from 'isomorphic-fetch';\r\nimport MediaCard from './MediaCard';\r\nclass RandomImage extends React.PureComponent {\r\n\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(props) {\r\n        super(props);\r\n        // this.loadData();\r\n        // не надо запускать асинхронные или долгие операции из конструктора\r\n        // конструктор инициализирует только КЛАСС, это ещё не React-компонент\r\n        // конструктор должен быть лёгким и быстрым\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadData();\r\n    }\r\n\r\n    state = {\r\n        dataReady: false,\r\n        name: \"???\",\r\n        message: [],\r\n    };\r\n\r\n    fetchError = (errorMessage) => {\r\n        console.error(errorMessage);\r\n    };\r\n\r\n    fetchSuccess = (loadedData) => {\r\n        console.log(loadedData);\r\n        this.setState({\r\n            dataReady: true,\r\n            status: loadedData.status,\r\n            message: loadedData.message,\r\n        });\r\n    };\r\n\r\n    loadData = () => {\r\n\r\n        isoFetch(\"https://dog.ceo/api/breeds/image/random\", {\r\n            method: 'get',\r\n            headers: {\r\n                \"Accept\": \"application/json\",\r\n            },\r\n        })\r\n            .then((response) => { // response - HTTP-ответ\r\n                if (!response.ok) {\r\n                    let Err = new Error(\"fetch error \" + response.status);\r\n                    Err.userMessage = \"Ошибка связи\";\r\n                    throw Err; // дальше по цепочке пойдёт отвергнутый промис\r\n                }\r\n                else\r\n                    return response.json(); // дальше по цепочке пойдёт промис с пришедшими по сети данными\r\n            })\r\n            .then((data) => {\r\n                try {\r\n                    this.fetchSuccess(data); // передаём полезные данные в fetchSuccess, дальше по цепочке пойдёт успешный пустой промис\r\n                }\r\n                catch (error) {\r\n                    this.fetchError(error.message); // если что-то пошло не так - дальше по цепочке пойдёт отвергнутый промис\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.fetchError(error.userMessage || error.message);\r\n            })\r\n            ;\r\n\r\n    };\r\n\r\n    render() {\r\n\r\n        if (!this.state.dataReady)\r\n            return <div>загрузка данных...</div>;\r\n\r\n        return (\r\n            <MediaCard srcImg={this.state.message} cbOnClick={this.loadData}>\r\n                <img srcImg={this.state.message} alt={this.state.message}  />\r\n            </MediaCard >\r\n        );\r\n    }\r\n}\r\n\r\nexport default RandomImage;\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport Home from './Home';\r\n//import BySubBreed from './BySubBreed';\r\nimport RandomImage from './RandomImage'\r\n\r\nclass PagesRouter extends React.Component {\r\n          \r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <Route path=\"/\" exact component={Home} />\r\n        {/*<Route path=\"/bysubbreed\" component={BySubBreed} />*/}\r\n        <Route path=\"/randomimage\" component={RandomImage} />\r\n      </div>\r\n    );\r\n    \r\n  }\r\n\r\n}\r\n    \r\nexport default PagesRouter;\r\n    ","import React from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\n//import FilterLink from '../containers/FilterLink'\r\n//simport { VisibilityFilters } from '../actions'\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n});\r\n\r\nconst Footer = (classes) => (\r\n  <div className={classes.root} >\r\n  <Grid container spacing={8}>\r\n    <Grid item xs={12} sm={3}>\r\n      {/*<FilterLink filter={VisibilityFilters.SHOW_ALL}>\r\n        All\r\n    </FilterLink>\r\n      <FilterLink filter={VisibilityFilters.SHOW_ACTIVE} color=\"secondary\">\r\n        Active\r\n    </FilterLink>\r\n      <FilterLink filter={VisibilityFilters.SHOW_COMPLETED} color=\"primary\">\r\n        Completed\r\n    </FilterLink>\r\n    </Grid>\r\n\r\n    <Grid item xs={12} sm={3}>\r\n      <FilterLink filter={VisibilityFilters.SHOW_TIME} color=\"primary\">\r\n        TIME 7:30\r\n    </FilterLink>\r\n      <FilterLink filter={VisibilityFilters.SHOW_PRIORITY} color=\"primary\">\r\n        Priotity 1-DoNow\r\n</FilterLink>*/}\r\n    </Grid>\r\n\r\n  </Grid >\r\n  </div>\r\n)\r\n\r\nexport default withStyles(styles)(Footer);\r\n","import React, { Component, Fragment } from 'react'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport SimpleAppBar from '../components/SimpleAppBar';\r\nimport PagesRouter from '../components/PagesRouter'\r\nimport Footer from '../components/Footer'\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <Fragment>\r\n          <SimpleAppBar />\r\n          <PagesRouter />\r\n          <Footer />\r\n        </Fragment>\r\n      </BrowserRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default (App)\r\n","import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport thunk from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\nimport reducer from './reducers'\r\nimport App from './containers/App'\r\n\r\nconst middleware = [ thunk ]\r\nif (process.env.NODE_ENV !== 'production') {\r\n  middleware.push(createLogger())\r\n}\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  applyMiddleware(...middleware)\r\n)\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}